
# CMA Intelligence System Integration
# Auto-generated by WILLOW v32.0 on 2025-07-22 18:55


# CMA Segment 3 - Google Sheets Integration
# This code integrates with the existing CMA workflow to automatically populate the Intelligence Sheet

import requests
import json
from datetime import datetime
import re

class CMAIntelligenceIntegration:
    def __init__(self):
        # Google Sheets API configuration
        self.sheet_id = "[YOUR_GOOGLE_SHEET_ID]"  # Replace with actual Sheet ID
        self.api_key = "AIzaSyDCo245uDrWF0BMGq74BZXaiGyYghB-k1k"  # Using existing Google API key
        self.base_url = f"https://sheets.googleapis.com/v4/spreadsheets/{self.sheet_id}"

        # Sheet range for CMA data
        self.data_range = "CMA_Intelligence!A:AS"  # Covers all 45 columns

    def extract_cma_data(self, property_address, client_data, cma_html, hvscma_url):
        """Extract all relevant data from CMA creation process"""

        # Generate unique CMA ID
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        cma_id = f"CMA-{timestamp}"

        # Parse property data from CMA HTML
        property_data = self.parse_property_data(cma_html)
        market_data = self.parse_market_data(cma_html)

        # Create complete data row
        cma_row = [
            cma_id,                                    # 🏠 CMA_ID
            property_address,                          # 📍 Property_Address
            client_data.get('name', ''),              # 👤 Client_Name
            client_data.get('email', ''),             # 📧 Client_Email
            client_data.get('phone', ''),             # 📞 Client_Phone
            datetime.now().strftime('%Y-%m-%d'),       # 📅 Creation_Date
            "Glenn Fitzgerald",                        # 🎯 Primary_Agent
            client_data.get('secondary_agent', ''),   # 🤝 Secondary_Agent
            hvscma_url,                               # 🔗 HVSCMA_URL
            property_data.get('type', ''),            # 🏡 Property_Type
            property_data.get('bedrooms', ''),        # 🛏️ Bedrooms
            property_data.get('bathrooms', ''),       # 🚿 Bathrooms
            property_data.get('sqft', ''),            # 📐 Square_Footage
            property_data.get('lot_size', ''),        # 🌳 Lot_Size
            property_data.get('year_built', ''),      # 🏗️ Year_Built
            property_data.get('suggested_price', ''), # 💰 Suggested_Price
            '',  # Formula will calculate                # 💵 Price_Per_SqFt
            property_data.get('condition', ''),       # ⭐ Property_Condition
            property_data.get('features', ''),        # ✨ Unique_Features
            market_data.get('comparable_count', '15'), # 📊 Comparable_Count
            market_data.get('avg_dom', ''),           # ⏰ Avg_Days_On_Market
            market_data.get('price_low', ''),         # 📈 Price_Range_Low
            market_data.get('price_high', ''),        # 📉 Price_Range_High
            market_data.get('trend', ''),             # 📊 Market_Trend
            market_data.get('competition', ''),       # 🔥 Competition_Level
            market_data.get('activity_score', ''),    # 🎯 Market_Activity_Score
            market_data.get('seasonal', ''),          # 🍂 Seasonal_Factors
            property_data.get('town', ''),            # 🏘️ Town
            property_data.get('county', ''),          # 🏛️ County
            property_data.get('school_district', ''), # 🎓 School_District
            property_data.get('subdivision', ''),     # 🏡 Subdivision
            property_data.get('zip_code', ''),        # 📮 ZIP_Code
            client_data.get('fub_id', ''),            # 🎯 FUB_Contact_ID
            client_data.get('lead_source', ''),       # 📱 Lead_Source
            'High',                                   # 💬 Engagement_Level
            'Active',                                 # ✅ Follow_Up_Status
            self.calculate_next_action_date(),        # 📅 Next_Action_Date
            '0',                                      # 👀 CMA_Views
            '0:00',                                   # ⏱️ Time_On_Page
            'Yes',                                    # 📱 Social_Ready
            'Yes',                                    # 🎥 Video_Suggested
            client_data.get('marketing_budget', ''),  # 💰 Marketing_Budget
            client_data.get('marketing_channels', ''), # 📢 Marketing_Channels
            self.generate_seo_keywords(property_data), # 🔍 SEO_Keywords
            f"CMA created {datetime.now().strftime('%Y-%m-%d')}" # 📝 Notes
        ]

        return cma_row

    def parse_property_data(self, cma_html):
        """Extract property data from CMA HTML content"""
        # Implementation would parse the actual CMA HTML
        # For now, return template structure
        return {
            'type': 'Single Family',
            'bedrooms': '3',
            'bathrooms': '2',
            'sqft': '1850',
            'lot_size': '0.25 acres',
            'year_built': '1985',
            'suggested_price': '425000',
            'condition': 'Good',
            'features': 'Updated kitchen, hardwood floors',
            'town': 'Poughkeepsie',
            'county': 'Dutchess',
            'school_district': 'Poughkeepsie City',
            'subdivision': 'Oak Hill Estates',
            'zip_code': '12601'
        }

    def parse_market_data(self, cma_html):
        """Extract market analysis data from CMA"""
        return {
            'comparable_count': '15',
            'avg_dom': '28',
            'price_low': '395000',
            'price_high': '455000',
            'trend': 'Stable',
            'competition': 'Moderate',
            'activity_score': '7',
            'seasonal': 'Spring market advantage'
        }

    def calculate_next_action_date(self):
        """Calculate next follow-up date (7 days from now)"""
        from datetime import timedelta
        next_date = datetime.now() + timedelta(days=7)
        return next_date.strftime('%Y-%m-%d')

    def generate_seo_keywords(self, property_data):
        """Generate SEO keywords from property data"""
        keywords = []
        if property_data.get('town'):
            keywords.append(f"{property_data['town']} homes")
        if property_data.get('subdivision'):
            keywords.append(property_data['subdivision'])
        keywords.append("move-in ready")
        return ", ".join(keywords)

    def append_to_sheet(self, cma_row):
        """Append new CMA data to Google Sheet"""
        url = f"{self.base_url}/values/{self.data_range}:append"

        body = {
            "values": [cma_row],
            "majorDimension": "ROWS"
        }

        params = {
            "key": self.api_key,
            "valueInputOption": "USER_ENTERED",
            "insertDataOption": "INSERT_ROWS"
        }

        try:
            response = requests.post(url, json=body, params=params)

            if response.status_code == 200:
                print(f"✅ CMA data successfully added to Intelligence Sheet")
                return True
            else:
                print(f"❌ Error adding to sheet: {response.status_code}")
                print(response.text)
                return False

        except Exception as e:
            print(f"❌ Exception during sheet update: {str(e)}")
            return False

    def update_cma_views(self, cma_id, views, time_on_page):
        """Update CMA view tracking data"""
        # Find the row with matching CMA_ID and update view data
        # Implementation would search for CMA_ID and update specific cells
        pass

# Integration with existing CMA Segment 3 workflow
def integrate_with_segment3(property_address, client_data, cma_html_content, hvscma_url):
    """Call this function at the end of CMA Segment 3 deployment"""

    print("🔄 Integrating with CMA Intelligence System...")

    # Initialize integration
    cma_intel = CMAIntelligenceIntegration()

    # Extract and prepare data
    cma_row = cma_intel.extract_cma_data(
        property_address, 
        client_data, 
        cma_html_content, 
        hvscma_url
    )

    # Add to Google Sheet
    success = cma_intel.append_to_sheet(cma_row)

    if success:
        print("✅ CMA Intelligence System updated successfully")
        print(f"🔗 CMA added to tracking: {hvscma_url}")
    else:
        print("❌ Failed to update CMA Intelligence System")

    return success

# Usage in CMA workflow:
# success = integrate_with_segment3(
#     property_address="123 Main St, Poughkeepsie, NY",
#     client_data={
#         'name': 'John Smith',
#         'email': 'john@email.com',
#         'phone': '(845) 555-0123',
#         'fub_id': 'FUB-12345',
#         'lead_source': 'Website'
#     },
#     cma_html_content=cma_html,
#     hvscma_url="https://hvscma.com/smith-123-main-street.html"
# )


# Additional utility functions for Google Sheets management

class GoogleSheetsManager:
    def __init__(self, sheet_id):
        self.sheet_id = sheet_id
        self.api_key = "AIzaSyDCo245uDrWF0BMGq74BZXaiGyYghB-k1k"
        self.base_url = f"https://sheets.googleapis.com/v4/spreadsheets/{sheet_id}"

    def create_sheet_from_csv(self, csv_file_path):
        """Create Google Sheet from CSV file"""
        # Implementation to create sheet from CSV data
        print("Creating Google Sheet from CSV data...")
        return True

    def setup_conditional_formatting(self):
        """Set up color coding and conditional formatting"""
        # Implementation for visual enhancements
        print("Setting up conditional formatting...")
        return True

    def create_business_views(self):
        """Create filtered views for different business purposes"""
        views = [
            "Active CMAs",
            "High Engagement Clients", 
            "Properties by Town",
            "Market Trends Analysis",
            "Follow-up Required"
        ]
        print(f"Creating business views: {views}")
        return True

# Usage:
# manager = GoogleSheetsManager("YOUR_SHEET_ID")
# manager.create_sheet_from_csv("HVSCMA_Intelligence_Master.csv")
# manager.setup_conditional_formatting()
# manager.create_business_views()
